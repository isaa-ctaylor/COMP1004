// ==========================
// Utility Functions
// ==========================

function getFieldValue(cell, field) {
    if (!cell || !cell.children[0]) return '';
    return cell.children[0]?.children[0]?.value || '';
}

function toggleError(cell, hasError) {
    cell.classList.toggle('error', hasError);
}

// ==========================
// Table Validation
// ==========================

function validateTables() {
    let allCellsGood = true;
    const tables = document.querySelectorAll('table.input-table');
    
    tables.forEach(table => {
        const tableRows = table.querySelectorAll('tbody tr:not(.hidden):not(.add-row)');
        
        tableRows.forEach(row => {
            const fields = ['description', 'frequency', 'amount', 'date'];

            fields.forEach(field => {
                const cell = row.querySelector(`[data-name="${field}"]`);
                const value = getFieldValue(cell, field);
                const isEmpty = value === '';

                toggleError(cell, isEmpty);
                if (isEmpty) allCellsGood = false;
            });
        });
    });

    return allCellsGood;
}

// ==========================
// Row Manipulation
// ==========================

function insertTableRow(tableBody) {
    const template = tableBody.querySelector('.template');
    const clone = template.cloneNode(true);
    clone.classList.remove('template', 'hidden');

    const addButton = tableBody.querySelector('.add-row');
    tableBody.insertBefore(clone, addButton);
}

function addTableRow(element) {
    const tableBody = element.closest('tbody');
    insertTableRow(tableBody);
}

function removeIncome(element) {
    element.parentNode.remove();
}

// ==========================
// Data Management
// ==========================

function storeData(data) {
    window.localStorage.setItem('data', JSON.stringify(data));
}

function loadData() {
    const data = JSON.parse(window.localStorage.getItem('data'));
    return data || {};
}

function exportData() {
    const data = loadData();
    const dataString = JSON.stringify(data);
    const blob = new Blob([dataString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = `budget-tracker-${new Date().toISOString()}.json`;
    link.click();
}

function importData(file) {
    const reader = new FileReader();
    reader.onload = () => {
        const data = JSON.parse(reader.result);

        // Validate the imported data
        if (!data.income || !data.expenses) {
            alert('Invalid data format. Please upload a valid file.');
            return;
        }

        if (!Array.isArray(data.income) || !Array.isArray(data.expenses)) {
            alert('Invalid data format. Please upload a valid file.');
            return;
        }

        data.income.forEach(row => {
            if (!row.description || !row.frequency || !row.amount || !row.date) {
                alert('Invalid data format. Please upload a valid file.');
                return;
            }
        });
        data.expenses.forEach(row => {
            if (!row.description || !row.frequency || !row.amount || !row.date) {
                alert('Invalid data format. Please upload a valid file.');
                return;
            }
        });

        storeData(data);
    };
    reader.readAsText(file);
}

function handleFileUpload(element) {
    const file = element.files[0];
    if (file) importData(file);
}

// ==========================
// Data Extraction & Update
// ==========================

function extractRowData(row) {
    return {
        description: getFieldValue(row.querySelector('[data-name="description"]'), 'description'),
        frequency: getFieldValue(row.querySelector('[data-name="frequency"]'), 'frequency'),
        amount: getFieldValue(row.querySelector('[data-name="amount"]'), 'amount'),
        date: getFieldValue(row.querySelector('[data-name="date"]'), 'date')
    };
}

function updateData() {
    const tables = [
        { id: 'income-table', type: 'income' },
        { id: 'expenses-table', type: 'expenses' }
    ];

    const data = { income: [], expenses: [] };

    tables.forEach(tableInfo => {
        const table = document.getElementById(tableInfo.id);
        const rows = table.querySelectorAll('tbody tr:not(.hidden):not(.add-row)');
        
        rows.forEach(row => {
            data[tableInfo.type].push(extractRowData(row));
        });
    });

    storeData(data);
}

function calculateTotals(data) {
    const totals = { income: 0, expenses: 0 };

    data.income.forEach(row => {
        if (isNaN(parseFloat(row.amount))) return;
        totals.income += parseFloat(row.amount);
    });

    data.expenses.forEach(row => {
        if (isNaN(parseFloat(row.amount))) return;
        totals.expenses += parseFloat(row.amount);
    });

    return totals;
}

function updateTotals() {
    const data = loadData();

    const totals = calculateTotals(data);

    document.getElementById('total-income').textContent = totals.income.toFixed(2);
    document.getElementById('total-expenses').textContent = totals.expenses.toFixed(2);
    document.getElementById('total').textContent = (totals.income - totals.expenses).toFixed(2);
}

function updateGraph() {
    const data = loadData();

    const totals = calculateTotals(data);

    document.getElementById('income-bar').style.width = `${(totals.income / (totals.income + totals.expenses)) * 97}%`;
    document.getElementById('expenses-bar').style.width = `${(totals.expenses / (totals.income + totals.expenses)) * 97}%`;
}

function onDataChange() {
    validateTables();

    updateData();
    updateTotals();
    updateGraph();
}

// ==========================
// Download & Data Sync
// ==========================

function doDataDownload() {
    if (!validateTables()) {
        alert('Please fix errors highlighted in red in order to download data.');
        return;
    }

    updateData();
    exportData();
}

// ==========================
// Radio Button Visibility Toggle
// ==========================

function toggleVisibility(type) {
    const incomeDiv = document.getElementById('income');
    const expensesDiv = document.getElementById('expenses');
    
    incomeDiv.classList.toggle('hidden', type !== 'income');
    expensesDiv.classList.toggle('hidden', type !== 'expenses');
}

function initializeRadioButtons() {
    const radioButtons = document.querySelectorAll('input[name="chip"]');
    
    radioButtons.forEach(radio => {
        radio.addEventListener('change', () => toggleVisibility(radio.value));
    });
}

// ==========================
// Initial Table Setup
// ==========================

function initializeTables() {
    const tables = document.querySelectorAll('table.input-table');
    
    tables.forEach(table => {
        const tableBody = table.querySelector('tbody');
        if (tableBody.querySelectorAll('tr:not(.hidden):not(.add-row)').length === 0) {
            insertTableRow(tableBody);
        }
    });
}

// ==========================
// Initialization on Page Load
// ==========================

document.addEventListener('DOMContentLoaded', () => {
    initializeRadioButtons();
    initializeTables();
});

// Get references to the radio buttons and divs
const incomeDiv = document.getElementById('income');
const expensesDiv = document.getElementById('expenses');
const radioButtons = document.querySelectorAll('input[name="chip"]');

// Add event listener to toggle visibility based on the selected radio button
radioButtons.forEach(radio => {
    radio.addEventListener('change', () => {
        if (radio.value === 'income') {
            incomeDiv.classList.remove('hidden');
            expensesDiv.classList.add('hidden');
        } else if (radio.value === 'expenses') {
            expensesDiv.classList.remove('hidden');
            incomeDiv.classList.add('hidden');
        }
    });
});

function insertTableRow(tableBody) {
    template = tableBody.querySelector('.template');
    clone = template.cloneNode(true);
    clone.classList.remove('template');
    clone.classList.remove('hidden');
    // Insert the new element before the add button
    addButton = tableBody.querySelector('.add-row');
    tableBody.insertBefore(clone, addButton);
}

function addTableRow(element) {
    tableBody = element.parentNode.parentNode;
    insertTableRow(tableBody);
}

function removeIncome(element) {
    element.parentNode.remove();
}

function storeData(data) {
    window.localStorage.setItem('data', JSON.stringify(data));
}

function loadData() {
    data = JSON.parse(window.localStorage.getItem('data'));
    return data;
}

function exportData() {
    data = loadData();
    dataString = JSON.stringify(data);
    // Create a blob object
    blob = new Blob([dataString], {type: 'application/json'});
    // Create a URL for the blob object
    url = URL.createObjectURL(blob);
    // Create a link element
    link = document.createElement('a');
    link.href = url;
    // Set download name to current datetime
    link.download = 'budget-tracker-' + new Date().toISOString() + '.json';
    // Click the link element
    link.click();
}

function importData(file) {
    reader = new FileReader();
    reader.onload = function() {
        data = JSON.parse(reader.result);
    }
    reader.readAsText(file);
}

function handleFileUpload(element) {
    file = element.files[0];

    importData(file);
}

function onTableUpdate() {
    // Get visible rows in income table
    incomeTable = document.getElementById('income-table');
    incomeTableBody = incomeTable.querySelector('tbody');
    incomeRows = incomeTableBody.querySelectorAll('tr:not(.hidden):not(.add-row)');
    // Get visible rows in expenses table
    // expensesTable = document.getElementById('expenses-table');
    // expensesTableBody = expensesTable.querySelector('tbody');
    // expensesRows = expensesTableBody.querySelectorAll('tr:not(.hidden)');
    // Create data object
    data = {
        'income': [],
        'expenses': []
    };
    // Loop through income rows and extract data
    incomeRows.forEach(row => {
        description = row.querySelector('[data-name="description"]').children[0].value;
        frequency = row.querySelector('[data-name="frequency"]').children[0].children[0].value;
        amount = row.querySelector('[data-name="amount"]').children[0].children[1].value;
        data.income.push({"description": description, "frequency": frequency, "amount": amount});
    })
    // Loop through expenses rows
    // expensesRows.forEach(row => {
    //     description = row.querySelector('[data-name="description"]').children[0].value;
    //     frequency = row.querySelector('[data-name="frequency"]').children[0].children[0].value;
    //     amount = row.querySelector('[data-name="amount"]').children[0].children[1].value;
    //     data.expenses.push({"description": description, "frequency": frequency, "amount": amount});
    // })
    storeData(data);
}

tables = document.querySelectorAll('table.input-table');
tables.forEach(table => {
    tableBody = table.querySelector('tbody');
    if (tableBody.querySelectorAll('tr:not(.hidden):not(.add-row)').length === 0) {
        insertTableRow(tableBody);
    };
});

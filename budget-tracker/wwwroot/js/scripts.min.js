// Get references to the radio buttons and divs
const incomeDiv = document.getElementById('income');
const expensesDiv = document.getElementById('expenses');
const radioButtons = document.querySelectorAll('input[name="chip"]');

// Add event listener to toggle visibility based on the selected radio button
radioButtons.forEach(radio => {
    radio.addEventListener('change', () => {
        if (radio.value === 'income') {
            incomeDiv.classList.remove('hidden');
            expensesDiv.classList.add('hidden');
        } else if (radio.value === 'expenses') {
            expensesDiv.classList.remove('hidden');
            incomeDiv.classList.add('hidden');
        }
    });
});

function addIncome() {
    addIncomeElement = document.getElementById('add-income');
    incomeTemplate = document.getElementById('income-template');
    incomeClone = incomeTemplate.cloneNode(true);
    incomeClone.removeAttribute('id');
    incomeClone.classList.remove('hidden');
    // Insert the new element before the add button
    addIncomeElement.parentNode.insertBefore(incomeClone, addIncomeElement);
}

incomeTable = document.getElementById('income-table');
// Get visible rows
incomeTableBody = incomeTable.querySelector('tbody');
incomeRows = incomeTableBody.querySelectorAll('tr:not(.hidden)');
if (incomeRows.length === 1) {
    addIncome();
}

function removeIncome(element) {
    element.parentNode.remove();
}

function storeData(data) {
    window.localStorage.setItem('data', JSON.stringify(data));
    console.log(JSON.parse(window.localStorage.getItem('data')));
}

function onTableUpdate() {
    // Get visible rows in income table
    incomeTable = document.getElementById('income-table');
    incomeTableBody = incomeTable.querySelector('tbody');
    incomeRows = incomeTableBody.querySelectorAll('tr:not(.hidden):not(#add-income)');
    // Get visible rows in expenses table
    // expensesTable = document.getElementById('expenses-table');
    // expensesTableBody = expensesTable.querySelector('tbody');
    // expensesRows = expensesTableBody.querySelectorAll('tr:not(.hidden)');
    // Create data object
    data = {
        'income': [],
        'expenses': []
    };
    // Loop through income rows and extract data
    incomeRows.forEach(row => {
        description = row.querySelector('[data-name="description"]').children[0].value;
        frequency = row.querySelector('[data-name="frequency"]').children[0].children[0].value;
        amount = row.querySelector('[data-name="amount"]').children[0].children[1].value;
        data.income.push({"description": description, "frequency": frequency, "amount": amount});
    })
    // Loop through expenses rows
    // expensesRows.forEach(row => {
    //     description = row.querySelector('[data-name="description"]').children[0].value;
    //     frequency = row.querySelector('[data-name="frequency"]').children[0].children[0].value;
    //     amount = row.querySelector('[data-name="amount"]').children[0].children[1].value;
    //     data.expenses.push({"description": description, "frequency": frequency, "amount": amount});
    // })
    storeData(data);
}
